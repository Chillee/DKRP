SimpleNet5x5: 2 conv layers (use relu in between)
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16 * 5 * 5, 132)
        self.classifier = nn.Linear(132, 10)

SimplerNet:
  def __init__(self):
        super(SimpleNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.fc1 = nn.Linear(14*14*6, 132)
        self.classifier = nn.Linear(132, 10)
 
        
    def forward(self, x):
        x = self.conv1(x)
        x = F.relu(x)
        x = self.pool( x)
        x = x.view(-1, 14*14*6)
        x = self.fc1(x)
        x = F.relu(x)

Simple3x3
    def __init__(self):
        super(SimpleNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 3)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 3)
        self.fc1 = nn.Linear(16 * 6*6, 132)
        self.classifier = nn.Linear(132, 10)
 
        
    def forward(self, x):
        x = self.conv1(x)
        x = F.relu(x)
        x = self.pool( x)
        x = self.conv2(x)
        x = F.relu(x)  
        x = self.pool(x)
        x = x.view(-1, 16 * 6 * 6)
        x = self.fc1(x)
        x = F.relu(x)

ComplexNet:
    def __init__(self):
        super(SimpleNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 3)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 3)
        self.conv3 = nn.Conv2d(16,32, 3)
        self.fc1 = nn.Linear(32*4*4, 132)
        self.classifier = nn.Linear(132, 10)
 
        
    def forward(self, x):
        x = self.conv1(x)
        x = F.relu(x)
        x = self.pool( x)
        x = self.conv2(x)
        x = F.relu(x)  
        x = self.pool(x)
        x = self.conv3(x)
        x = x.view(-1, 32*4*4)
        x = self.fc1(x)
        x = F.relu(x)
        return x


RNN:
    def __init__(self):
        super(SimpleNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 5, padding=2)
        self.conv2 = nn.Conv2d(6, 3, 5, padding=2)
        self.fc1 = nn.Linear(3*32*32, 132)
        self.classifier = nn.Linear(132, 10)
        self.num_recurs = 2
 
    def forward(self, x):
        for i in range(self.num_recurs):
            x = self.conv1(x)
            x = F.relu(x)
            x = self.conv2(x)
            x = F.relu(x)  
        x = x.view(-1, 3*32*32)
        x = self.fc1(x)
        x = F.relu(x)


